package vn.edu.fpt.BeautyCenter.mapper;

/*
 * Copyright(C) 2025, FPT University.
 * SBS :
 *  Smart Beauty System
 *
 * Record of change:
 * DATE         Version  AUTHOR   DESCRIPTION
 * 2025-06-08   1.0      TrungBD  First Implement
 */

import org.mapstruct.*;
import vn.edu.fpt.BeautyCenter.dto.request.ServiceCreationRequest;
import vn.edu.fpt.BeautyCenter.dto.request.ServiceUpdateRequest;
import vn.edu.fpt.BeautyCenter.dto.response.ServiceResponse;
import vn.edu.fpt.BeautyCenter.entity.Service;
import vn.edu.fpt.BeautyCenter.entity.ServiceTag;

import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneOffset;
import java.util.Collections;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

/**
 * Mapper for converting between Service entities and DTOs.
 * <p>
 * Handles custom mappings for duration formatting, tag conversion, and date/time transformations.
 * Integrates with StaffMapper and MaterialMapper for complex object mappings.
 * </p>
 */
@Mapper(componentModel = "spring",
        uses = {StaffMapper.class, MaterialMapper.class},
        injectionStrategy = InjectionStrategy.CONSTRUCTOR)
public interface ServiceMapper {

    /**
     * Converts a ServiceCreationRequest to a Service entity.
     * <p>
     * Ignores serviceId as it will be generated by the persistence layer.
     * </p>
     *
     * @param request the service creation DTO
     * @return Service entity ready for persistence
     */
    @Mapping(target = "serviceId", ignore = true)
    Service toService(ServiceCreationRequest request);

    /**
     * Converts a Service entity to a ServiceResponse DTO.
     * <p>
     * Applies custom formatting for duration and tag conversion.
     * Formats createdAt date using "dd/MM/yyyy HH:mm" pattern.
     * </p>
     *
     * @param entity the service entity to convert
     * @return formatted response DTO
     */
    @Mapping(target = "duration", expression = "java(formatDuration(entity.getDuration()))")
    @Mapping(target = "tags", source = "serviceTags", qualifiedByName = "mapTags")
    @Mapping(target = "createdAt", source = "createdAt", dateFormat = "dd/MM/yyyy HH:mm")
    @Mapping(target = "createdBy", source = "createdBy")
    ServiceResponse toResponse(Service entity);

    /**
     * Converts ServiceTag entities to their tag names.
     *
     * @param tags set of ServiceTag entities
     * @return list of tag names, or empty list if input is null
     */
    @Named("mapTags")
    default List<String> mapTags(Set<ServiceTag> tags) {
        if (tags == null) return Collections.emptyList();
        return tags.stream()
                .map(ServiceTag::getTagName)
                .collect(Collectors.toList());
    }

    /**
     * Updates an existing Service entity from a ServiceUpdateRequest.
     * <p>
     * Inherits inverse mapping configuration from toEntity method.
     * </p>
     *
     * @param entity  the target entity to update
     * @param request the source update DTO
     */
    @InheritInverseConfiguration(name = "toEntity")
    void updateEntity(@MappingTarget Service entity, ServiceUpdateRequest request);

    /**
     * Converts Instant to LocalDateTime in UTC timezone.
     *
     * @param instant the Instant to convert
     * @return corresponding LocalDateTime, or null if input is null
     */
    default LocalDateTime instantToLocalDateTime(Instant instant) {
        return instant == null ? null : LocalDateTime.ofInstant(instant, ZoneOffset.UTC);
    }

    /**
     * Formats duration in minutes to "X hour YY minute" string.
     *
     * @param minutes total duration in minutes
     * @return formatted duration string, or empty string if input is null
     */
    default String formatDuration(Integer minutes) {
        if (minutes == null) return "";
        return String.format("%d hour %02d minute", minutes / 60, minutes % 60);
    }
}
